{"version":3,"sources":["../node_modules/lodash.debounce/index.js","js/timer_class.js"],"names":["refs","clockFaceDays","document","querySelector","clockFaceHours","clockFaceMinutes","clockFaceSecond","dateInput","debounce","require","CountdownTimer","selector","targetDate","setInterval","nowDate","Date","now","deltaTime","updateClockface","timeFinish","pad","Math","floor","textContent","value","String","padStart","clockFace","getElementById","clearInterval","setInt","renderCounter","event","newTargetDate","target","console","log","clearContent","timer1","addEventListener"],"mappings":"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","file":"timer_class.e9417154.js","sourceRoot":"../src","sourcesContent":["/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","const refs = {\n  clockFaceDays: document.querySelector('.value[data-value=\"days\"]'),\n  clockFaceHours: document.querySelector('.value[data-value=\"hours\"]'),\n  clockFaceMinutes: document.querySelector('.value[data-value=\"mins\"]'),\n  clockFaceSecond: document.querySelector('.value[data-value=\"secs\"]'),\n  dateInput: document.querySelector('#date')\n};\nconst debounce = require('lodash.debounce');\n\n//===Вариант 1 =======\n// class CountdownTimer {\n//   constructor({ selector, targetDate } = {}) {\n//     this.selector = selector;\n//     this.targetDate = targetDate;\n//   }\n\n//   setInt = setInterval(() => {\n//     const nowDate = Date.now();\n//     const deltaTime = this.targetDate - nowDate;\n//     this.updateClockface(deltaTime);\n//     this.timeFinish(deltaTime);\n//   }, 1000);\n\n//   updateClockface(deltaTime) {\n//     const clockFaceDays = this.pad(Math.floor(deltaTime / (1000 * 60 * 60 * 24)));\n//     const clockFaceHours = this.pad(Math.floor((deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n//     const clockFaceMinutes = this.pad(Math.floor((deltaTime % (1000 * 60 * 60)) / (1000 * 60)));\n//     const clockFaceSecond = this.pad(Math.floor((deltaTime % (1000 * 60)) / 1000));\n//     refs.clockFaceDays.textContent = `${clockFaceDays}`;\n//     refs.clockFaceHours.textContent = `${clockFaceHours}`;\n//     refs.clockFaceMinutes.textContent = `${clockFaceMinutes}`;\n//     refs.clockFaceSecond.textContent = `${clockFaceSecond}`;\n//   }\n\n//   pad(value) {\n//     return String(value).padStart(2, \"0\");\n//   }\n\n//   timeFinish(value) { //value - принимает значение deltaTime при вызове setInt\n//     if (value < 0) {\n//       clearInterval(this.setInt);\n//       const clockFace = document.getElementById(this.selector);\n//       clockFace.textContent = \"Time expired\";\n//     }\n//   }\n// };\n\n// new CountdownTimer({\n//   selector: \"timer-1\",\n//   targetDate: new Date(\"December 18, 2021\"),\n// });\n//======================================================\n\nclass CountdownTimer { //===Вариант 2 ===\n  constructor(selector, targetDate) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n  }\n\n  setInt = setInterval(() => {\n    const nowDate = Date.now();\n    const finDate = new Date(this.targetDate); //преобразование даты в миллисекунды\n    const deltaTime = finDate - nowDate;\n    this.updateClockface(deltaTime);\n    this.timeFinish(deltaTime);\n  }, 1000);\n\n  updateClockface(deltaTime) {\n    const clockFaceDays = this.pad(Math.floor(deltaTime / (1000 * 60 * 60 * 24)));\n    const clockFaceHours = this.pad(Math.floor((deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const clockFaceMinutes = this.pad(Math.floor((deltaTime % (1000 * 60 * 60)) / (1000 * 60)));\n    const clockFaceSecond = this.pad(Math.floor((deltaTime % (1000 * 60)) / 1000));\n    refs.clockFaceDays.textContent = `${clockFaceDays}`;\n    refs.clockFaceHours.textContent = `${clockFaceHours}`;\n    refs.clockFaceMinutes.textContent = `${clockFaceMinutes}`;\n    refs.clockFaceSecond.textContent = `${clockFaceSecond}`;\n  }\n\n  pad(value) {\n    return String(value).padStart(2, \"0\");\n  }\n\n  timeFinish(value) { //value - принимает значение deltaTime при вызове в setInt\n    if (value < 0) {\n      const clockFace = document.getElementById(this.selector);\n      clearInterval(this.setInt);\n      clockFace.textContent = \"Time expired\";\n\n    }\n  }\n};\n\n\n// const newTargerDate = `october 18, 2022`;\n// const timer1 = new CountdownTimer(\"timer-1\", newTargerDate);\n\nrefs.dateInput.addEventListener('input', debounce(renderCounter, 5000));\n\nfunction renderCounter(event) {\n  // event.preventDefault;\n  let newTargetDate = event.target.value;\n  console.log(newTargetDate);\n  if (refs.dateInput.value !== event.target.value) {\n    console.log(refs.dateInput.value);\n    clearContent();\n    newTargetDate = event.target.value;\n    console.log(newTargetDate);\n  }\n  // newTargetDate = refs.dateInput.value;\n\n\n  const timer1 = new CountdownTimer(\"timer-1\", newTargetDate);\n  console.log(newTargetDate);\n  return timer1;\n};\n\nfunction clearContent() {\n  refs.dateInput.value = \"\";\n}"]}