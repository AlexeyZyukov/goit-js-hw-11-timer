{"version":3,"sources":["js/timer_class.js"],"names":["refs","clockFaceDays","document","querySelector","clockFaceHours","clockFaceMinutes","clockFaceSecond","dateInput","CountdownTimer","selector","targetDate","setInterval","nowDate","Date","now","deltaTime","updateClockface","timeFinish","pad","Math","floor","textContent","value","String","padStart","clockFace","getElementById","clearInterval","setInt","addEventListener","event","newTargetDate","target","console","log","newTargerDate","timer1"],"mappings":";AAoGA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EApGA,IAAMA,EAAO,CACXC,cAAeC,SAASC,cAAc,6BACtCC,eAAgBF,SAASC,cAAc,8BACvCE,iBAAkBH,SAASC,cAAc,6BACzCG,gBAAiBJ,SAASC,cAAc,6BACxCI,UAAWL,SAASC,cAAc,UA+C9BK,EAAAA,WACQC,SAAAA,EAAAA,EAAUC,GAAY,IAAA,EAAA,KAAA,EAAA,KAAA,GAKzBC,EAAAA,KAAAA,SAAAA,YAAY,WACbC,IAAAA,EAAUC,KAAKC,MAEfC,EADU,IAAIF,KAAK,EAAKH,YACFE,EAC5B,EAAKI,gBAAgBD,GACrB,EAAKE,WAAWF,IACf,MAVIN,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EA6CtB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,kBAlCE,MAAA,SAAgBK,GACRd,IAAAA,EAAgB,KAAKiB,IAAIC,KAAKC,MAAML,EAAa,QACjDX,EAAiB,KAAKc,IAAIC,KAAKC,MAAOL,EAAa,MAAyB,OAC5EV,EAAmB,KAAKa,IAAIC,KAAKC,MAAOL,EAAa,KAAoB,MACzET,EAAkB,KAAKY,IAAIC,KAAKC,MAAOL,EAAa,IAAc,MACxEf,EAAKC,cAAcoB,YAAiBpB,GAAAA,OAAAA,GACpCD,EAAKI,eAAeiB,YAAiBjB,GAAAA,OAAAA,GACrCJ,EAAKK,iBAAiBgB,YAAiBhB,GAAAA,OAAAA,GACvCL,EAAKM,gBAAgBe,YAAiBf,GAAAA,OAAAA,KA0B1C,CAAA,IAAA,MAvBE,MAAA,SAAIgB,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,OAsBrC,CAAA,IAAA,aAnBE,MAAA,SAAWF,GACLA,GAAAA,EAAQ,EAAG,CACPG,IAAAA,EAAYvB,SAASwB,eAAe,KAAKjB,UAC/CkB,cAAc,KAAKC,QACnBH,EAAUJ,YAAc,oBAe9B,EAhDMb,GA0CNR,EAAKO,UAAUsB,iBAAiB,QAAS,SAACC,GAClCC,IAAAA,EAAgBD,EAAME,OAAOV,MAE5BS,OADPE,QAAQC,IAAIH,GACLA,IAETE,QAAQC,IAAIC,eACZ,IAAMC,EAAS,IAAI5B,EAAe,UAAW2B","file":"timer_class.d1c219f3.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  clockFaceDays: document.querySelector('.value[data-value=\"days\"]'),\n  clockFaceHours: document.querySelector('.value[data-value=\"hours\"]'),\n  clockFaceMinutes: document.querySelector('.value[data-value=\"mins\"]'),\n  clockFaceSecond: document.querySelector('.value[data-value=\"secs\"]'),\n  dateInput: document.querySelector('#date')\n};\n\n//===Вариант 1 =======\n// class CountdownTimer {\n//   constructor({ selector, targetDate } = {}) {\n//     this.selector = selector;\n//     this.targetDate = targetDate;\n//   }\n\n//   setInt = setInterval(() => {\n//     const nowDate = Date.now();\n//     const deltaTime = this.targetDate - nowDate;\n//     this.updateClockface(deltaTime);\n//     this.timeFinish(deltaTime);\n//   }, 1000);\n\n//   updateClockface(deltaTime) {\n//     const clockFaceDays = this.pad(Math.floor(deltaTime / (1000 * 60 * 60 * 24)));\n//     const clockFaceHours = this.pad(Math.floor((deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n//     const clockFaceMinutes = this.pad(Math.floor((deltaTime % (1000 * 60 * 60)) / (1000 * 60)));\n//     const clockFaceSecond = this.pad(Math.floor((deltaTime % (1000 * 60)) / 1000));\n//     refs.clockFaceDays.textContent = `${clockFaceDays}`;\n//     refs.clockFaceHours.textContent = `${clockFaceHours}`;\n//     refs.clockFaceMinutes.textContent = `${clockFaceMinutes}`;\n//     refs.clockFaceSecond.textContent = `${clockFaceSecond}`;\n//   }\n\n//   pad(value) {\n//     return String(value).padStart(2, \"0\");\n//   }\n\n//   timeFinish(value) { //value - принимает значение deltaTime при вызове setInt\n//     if (value < 0) {\n//       clearInterval(this.setInt);\n//       const clockFace = document.getElementById(this.selector);\n//       clockFace.textContent = \"Time expired\";\n//     }\n//   }\n// };\n\n// new CountdownTimer({\n//   selector: \"timer-1\",\n//   targetDate: new Date(\"December 18, 2021\"),\n// });\n//======================================================\n\nclass CountdownTimer { //===Вариант 2 ===\n  constructor(selector, targetDate) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n  }\n\n  setInt = setInterval(() => {\n    const nowDate = Date.now();\n    const finDate = new Date(this.targetDate); //преобразование даты в миллисекунды\n    const deltaTime = finDate - nowDate;\n    this.updateClockface(deltaTime);\n    this.timeFinish(deltaTime);\n  }, 1000);\n\n  updateClockface(deltaTime) {\n    const clockFaceDays = this.pad(Math.floor(deltaTime / (1000 * 60 * 60 * 24)));\n    const clockFaceHours = this.pad(Math.floor((deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const clockFaceMinutes = this.pad(Math.floor((deltaTime % (1000 * 60 * 60)) / (1000 * 60)));\n    const clockFaceSecond = this.pad(Math.floor((deltaTime % (1000 * 60)) / 1000));\n    refs.clockFaceDays.textContent = `${clockFaceDays}`;\n    refs.clockFaceHours.textContent = `${clockFaceHours}`;\n    refs.clockFaceMinutes.textContent = `${clockFaceMinutes}`;\n    refs.clockFaceSecond.textContent = `${clockFaceSecond}`;\n  }\n\n  pad(value) {\n    return String(value).padStart(2, \"0\");\n  }\n\n  timeFinish(value) { //value - принимает значение deltaTime при вызове в setInt\n    if (value < 0) {\n      const clockFace = document.getElementById(this.selector);\n      clearInterval(this.setInt);\n      clockFace.textContent = \"Time expired\";\n\n    }\n  }\n};\n\n\n// const newTargerDate = `october 18, 2022`;\n\nrefs.dateInput.addEventListener('input', (event) => {\n  const newTargetDate = event.target.value;\n  console.log(newTargetDate);\n  return newTargetDate;\n});\nconsole.log(newTargerDate);\nconst timer1 = new CountdownTimer(\"timer-1\", newTargerDate);"]}